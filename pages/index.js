
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from "react"
import { providers } from "ethers"
import { getAddress } from "ethers/lib/utils"
import WalletConnectProvider from "@walletconnect/ethereum-provider"
import useLocalStorage from "use-local-storage"

const provider = new WalletConnectProvider({
  chainId: 1, // Mainnet
  infuraId: "693d1f7a93cf423292831b166172b0ca" // Default ID
})

provider.on("accountsChanged", (accounts) => {
  console.log("accountsChanged: ", accounts)
})

provider.on("chainChanged", (chainId) => {
  console.log("chainChanged: ", chainId)
})

provider.on("disconnect", (code, reason) => {
  console.log("disconnect: ", code, reason)
})

const WCButton = ({}) => {

  const [connected, setConnected] = useLocalStorage("connected", false)
  const [connection, setConnection] = useState(null)

  useEffect(() => {
    if (connected) init()
  }, [])

  useEffect(() => {
    setConnected(connection ? true : false)
  }, [connection])

  const connect = async () => {
    const accounts = await provider.enable()
    const address = getAddress(accounts[0])
    const signer = new providers.Web3Provider(provider).getSigner(address)
    const deepLinkJson = localStorage.getItem("WALLETCONNECT_DEEPLINK_CHOICE")
    const deepLinkUrl = deepLinkJson ? JSON.parse(deepLinkJson).href : null
    setConnection({ address, deepLinkUrl, signer })
  }

  const init = async () => {
    try { await connect() } 
    catch (e) { console.error(e) }
  }

  const mountModal = (e) => {
    e.preventDefault()
    init()
  }

  const disconnect = (e) => {
    e.preventDefault()
    provider.disconnect()
    setConnection(null)
  }

  return (!connection ?
    <a href="" onClick={mountModal} className={styles.card}>
      <h2>Connect Wallet &rarr;</h2>
      <p>Launch the standard WalletConnect modal</p>
    </a>
    :
    <a href="" onClick={disconnect} className={styles.card}>
      <h2>Disconnect Wallet &rarr;</h2>
      <p style={{ overflowWrap: "break-word" }}>Connected to {connection.address}</p>
    </a>
  )
}

const Home = () => {

  const handleWindowRedirect = (e) => {
    e.preventDefault()
    window.location.href = e.target.href || e.target.parentElement.href
  }

  const handleTimedRedirect = (e) => {
    e.preventDefault()
    setTimeout(() => window.location.href = e.target.href || e.target.parentElement.href, 1000)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Rainbow App Links</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Rainbow App Links
        </h1>

        <p className={styles.description}>
          Test various Rainbow App Link flows
        </p>

        <div className={styles.grid}>
          <a href="https://rnbwapp.com/" className={styles.card}>
            <h2>Universal Link &rarr;</h2>
            <p>Test the rnbwapp.com universal link href</p>
          </a>

          <a href="rainbow://" className={styles.card}>
            <h2>Deep Link &rarr;</h2>
            <p>Test the rainbow:// deep link URI scheme href</p>
          </a>

          <a href="https://rnbwapp.com/token?addr=eth" className={styles.card}>
            <h2>Token &rarr;</h2>
            <p>Open the universal link for the ETH token view</p>
          </a>

          <a href="https://rnbwapp.com/imhiring.eth" className={styles.card}>
            <h2>Profile &rarr;</h2>
            <p>Open the universal link for an ENS profile</p>
          </a>

          <a href="https://rnbwapp.com/" onClick={handleWindowRedirect} className={styles.card}>
            <h2>Window Redirect &rarr;</h2>
            <p>Set the window.location.href to rnbwapp.com</p>
          </a>

          <a href="https://rnbwapp.com/" onClick={handleTimedRedirect} className={styles.card}>
            <h2>Timed Redirect &rarr;</h2>
            <p>Set the window.location.href to rnbwapp.com after 1s</p>
          </a>

          <a href="https://rnbwapp.com/wc" onClick={handleWindowRedirect} className={styles.card}>
            <h2>WC Redirect &rarr;</h2>
            <p>Set the window.location.href to rnbwapp.com/wc</p>
          </a>

          <a href="https://rnbwapp.com/wc" onClick={handleTimedRedirect} className={styles.card}>
            <h2>WC Timed Redirect &rarr;</h2>
            <p>Set the window.location.href to rnbwapp.com/wc after 1s</p>
          </a>

          <WCButton/>

        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home